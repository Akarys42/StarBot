#! /usr/bin/env python
import ast
import sys
from ast import AnnAssign, ClassDef, Name
from pathlib import Path
from typing import Optional

import yaml

from starbot.configuration.definition import SPECIAL_TYPES

HELP_TEXT = """
This script generates the typing stub for the config module.

Usage:
    python tools/generate_config_typing.py
""".strip()

HEADER = """\
# This file is automatically generated by tools/generate_config_typing.py
# Do not modify this file directly.
# The content of this file is based on the config-definition.yaml file.
# It is used to provide type hints for the config module, to be used by your IDE.

# fmt: off
from starbot.configuration.config_abc import ConfigABC
"""

TARGET = Path("starbot/configuration/config.pyi")
DEFINITION_FILE = Path("starbot/configuration/config-definition.yaml")

with DEFINITION_FILE.open() as file:
    CONFIG_DEFINITION = yaml.safe_load(file)


def add_node(base: Optional[ClassDef], name: str, node: dict) -> ClassDef:
    """
    Add a new node under base.

    The node dictionary contains all the attributes mapped to their types.
    The new node is returned.
    """
    new_node = ClassDef(
        name=name,
        body=[
            AnnAssign(
                target=Name(id=key), annotation=Name(id=SPECIAL_TYPES.get(value, value)), simple=1
            )
            for key, value in node.items()
        ],
        decorator_list=[],
        bases=[Name("ConfigABC")],
        keywords=[],
    )
    if base:
        base.body.append(new_node)
    return new_node


def process_definition(parent: Optional[ClassDef], name: str, definition: dict) -> ClassDef:
    """Recursively process a node definition."""
    entries = {}
    children = {}

    for key, value in definition.items():
        assert isinstance(value, dict)

        # Check if the node is an entry definition.
        if "type" in value:
            entries[key] = value["type"]
        else:
            # Otherwise, it's a child node.
            children[key] = value

    # Create the current node.
    node = add_node(parent, name, entries)

    # Add all the children.
    for key, value in children.items():
        process_definition(node, key, value)

    return node


def main() -> None:
    """Generate the typing stub."""
    root = process_definition(None, "GuildConfig", CONFIG_DEFINITION)

    with TARGET.open("w") as file:
        file.write(HEADER)
        file.write("\n")
        file.write(ast.unparse(root))
        file.write("\n")

    print(f"Wrote typing stub to {TARGET}")


if __name__ == "__main__":
    if sys.argv[1:] == ["--help"]:
        print(HELP_TEXT)
        sys.exit(0)
    main()
